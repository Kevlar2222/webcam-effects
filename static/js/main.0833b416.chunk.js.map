{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","className","Title","Effects","React","Component","id","name","type","Video","isPlaying","video","getVideo","bind","drawToCanvas","redEffect","blueEffect","greenEffect","splitEffect","ghostEffect","navigator","mediaDevices","getUserMedia","mediaStream","document","querySelector","srcObject","play","this","setState","onloadedmetadata","pixels","i","data","length","canvas","height","videoHeight","width","videoWidth","ctx","getContext","setInterval","drawImage","getImageData","choice","globalAlpha","putImageData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0833b416.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    };\n  }\n\n  componentDidMount () {\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <Title />\n        <Effects/>\n        <Video />\n      </div>\n    );\n  }\n}\n\nfunction Title() {\n  return (\n    <div>\n      <div id=\"title\">\n        <h1>Webcam Effects</h1>\n      </div>\n      <div id=\"subtitle\">\n        <h2>By Kevin Satti</h2>\n      </div>\n      <video className=\"video\"></video>\n    </div>\n  );\n}\n\nfunction Effects(props) {\n  return (\n    <form className=\"navBar\">\n      <label>\n        Red\n        <input className=\"red\" name=\"choice\" type=\"radio\"></input>\n      </label>\n      <label>\n        Blue\n        <input className=\"blue\" name=\"choice\" type=\"radio\"></input>\n      </label>\n      <label>\n        Green\n        <input className=\"green\" name=\"choice\" type=\"radio\"></input>\n      </label>     \n      <label>\n        Split\n        <input className=\"split\" name=\"choice\" type=\"radio\"></input>\n      </label>\n      <label>\n        Ghost\n        <input className=\"ghost\" name=\"choice\" type=\"radio\"></input>\n      </label>\n      \n    </form>\n  );\n}\n\nclass Video extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isPlaying: false,\n      video: \"\"\n    };\n    this.getVideo = this.getVideo.bind(this);\n    this.drawToCanvas = this.drawToCanvas.bind(this);\n    this.redEffect = this.redEffect.bind(this);\n    this.blueEffect = this.blueEffect.bind(this);\n    this.greenEffect = this.greenEffect.bind(this);\n    this.splitEffect = this.splitEffect.bind(this);\n    this.ghostEffect = this.ghostEffect.bind(this);\n  }\n\n  async getVideo () {\n    const mediaStream = await navigator.mediaDevices.getUserMedia({video: true});\n    let video = document.querySelector(\"video\");\n    video.srcObject = mediaStream;\n    video.play();\n    this.setState({isPlaying: true});\n    this.setState({video: video});\n    video.onloadedmetadata = () => {\n      this.drawToCanvas();\n    }\n  }\n\n  componentDidMount () {\n    this.getVideo();\n  }\n\n  redEffect(pixels) {\n    for (let i = 0; i < pixels.data.length; i+=4) {\n      pixels.data[i + 0] = pixels.data[i + 0] + 150; // RED\n      pixels.data[i + 1] = pixels.data[i + 1] - 50; // GREEN\n      pixels.data[i + 2] = pixels.data[i + 2] - 50; // Blue\n    }\n    return pixels;\n  }\n\n  blueEffect(pixels) {\n    for (let i = 0; i < pixels.data.length; i+=4) {\n      pixels.data[i + 0] = pixels.data[i + 0] - 50; // RED\n      pixels.data[i + 1] = pixels.data[i + 1] - 50; // GREEN\n      pixels.data[i + 2] = pixels.data[i + 2] + 150; // Blue\n    }\n    return pixels;\n  }\n\n  greenEffect(pixels) {\n    for (let i = 0; i < pixels.data.length; i+=4) {\n      if(pixels.data[i + 0] < 100 && pixels.data[i + 1] < 100 && pixels.data[i + 2] < 100) {\n        pixels.data[i + 0] = 0;\n        pixels.data[i + 1] = 255;\n        pixels.data[i + 2] = 0;\n      }\n    }\n    return pixels;\n  }\n\n  ghostEffect(pixels) {\n    for (let i = 0; i < pixels.data.length; i+=4) {\n      pixels.data[i + 0] = pixels.data[i + 0] + 5;\n      pixels.data[i + 1] = pixels.data[i + 1] + 5;\n      pixels.data[i + 2] = pixels.data[i + 2] + 5;\n    }\n    return pixels;\n  }\n\n  splitEffect(pixels) {\n    for (let i = 0; i < pixels.data.length; i+=4) {\n      pixels.data[i - 350] = pixels.data[i + 0];\n      pixels.data[i + 500] = pixels.data[i + 1];\n      pixels.data[i - 550] = pixels.data[i + 2];\n    }\n    return pixels;\n  }\n\n  drawToCanvas () {\n    let canvas = document.querySelector(\"canvas\");\n    let video = document.querySelector(\"video\");\n    const height = video.videoHeight;\n    const width = video.videoWidth;\n    canvas.height = height;\n    canvas.width = width;\n    let ctx = canvas.getContext(\"2d\");\n    setInterval( () => {\n      ctx.drawImage(video, 0, 0, width, height);\n      let pixels = ctx.getImageData(0, 0, width, height);\n      let choice = document.querySelector(\"input[type=radio]:checked\");\n      if(choice !== null) {\n        choice = choice.className;\n      }\n      if(choice === 'red'){\n        this.redEffect(pixels);\n        ctx.globalAlpha = 1;\n      }\n      if(choice === 'blue'){\n        this.blueEffect(pixels);\n        ctx.globalAlpha = 1;\n      }\n      if(choice === 'green'){\n        this.greenEffect(pixels);\n        ctx.globalAlpha = 1;\n      }\n      if(choice === 'ghost'){\n        this.ghostEffect(pixels);\n        ctx.globalAlpha = 0.05;\n      }\n      if(choice === 'split'){\n        this.splitEffect(pixels);\n      }\n      ctx.putImageData(pixels, 0, 0);\n    }, 16);\n  }\n\n  render () {\n    return (\n      <div className=\"videoContainer\">\n        <canvas className=\"canvas\"></canvas>\n      </div>\n    );\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}